{"version":3,"sources":["components/PeopleFilters.tsx","types/sortType.ts","components/Loader/Loader.tsx","components/PeopleTable.tsx","utils/filter.ts","components/PeoplePage.tsx","components/Navbar.tsx","api.ts","App.tsx","index.tsx"],"names":["CENTURIES","PeopleFilters","useSearchParams","searchParams","setSearchParams","currentQuery","get","currentSex","centuries","getAll","handleSortCenuties","field","num","param","URLSearchParams","includes","filter","century","forEach","append","toString","className","cn","trim","to","set","handleSortMale","handleSortFemale","type","placeholder","onChange","event","inputValue","target","value","newParams","delete","map","href","SortField","Loader","PeopleTable","person","isLoading","slug","useParams","currentSearch","currentOrder","currentCenturies","sortOrderIcon","handleSortType","newSearch","newOrder","pathname","search","currentSortField","Sex","Born","Died","Name","filteredPersons","people","params","filteredPeople","sex","query","normalizeQuery","toLowerCase","name","fatherName","motherName","length","Math","ceil","born","sortField","order","sort","p1","p2","localeCompare","filterPeople","findParent","persons","parentName","find","parent","personItem","father","mother","died","PeoplePage","Navbar","loacation","useLocation","role","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","App","useState","setPerson","setIsLoading","useEffect","getPeople","finally","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.e6a149a4.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nconst CENTURIES = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentQuery = searchParams.get('query') || '';\n  const currentSex = searchParams.get('sex') || '';\n  const centuries = [...searchParams.getAll('centuries')];\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n    const newParams = new URLSearchParams();\n\n    if (inputValue) {\n      newParams.set('query', inputValue);\n    } else {\n      newParams.delete('query');\n    }\n\n    setSearchParams(newParams);\n  };\n\n  const handleSortMale = (field: string) => {\n    const param = new URLSearchParams();\n\n    if (field === 'sex') {\n      param.set('sex', 'm');\n    }\n\n    return `/people?${param.toString()}`;\n  };\n\n  const handleSortFemale = (field: string) => {\n    const param = new URLSearchParams();\n\n    if (field === 'sex') {\n      param.set('sex', 'f');\n    }\n\n    return `/people?${param.toString()}`;\n  };\n\n  const toggleCentury = (num: string) => {\n    if (centuries.includes(num)) {\n      return centuries.filter(century => century !== num);\n    }\n\n    return [...centuries, num];\n  };\n\n  const handleSortCenuties = (field: string) => {\n    const param = new URLSearchParams();\n\n    const selectedCenturies = toggleCentury(field);\n\n    selectedCenturies.forEach(century => param.append('centuries', century));\n\n    return `/people?${param.toString()}`;\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          className={cn({\n            'is-active': currentQuery.trim() === '' && !currentSex,\n          })}\n          to=\"#/people\"\n        >\n          All\n        </Link>\n        <Link\n          className={cn({ 'is-active': currentSex === 'm' })}\n          to={handleSortMale('sex')}\n        >\n          Male\n        </Link>\n        <Link\n          className={cn({ 'is-active': currentSex === 'f' })}\n          to={handleSortFemale('sex')}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQuery}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          {CENTURIES.map(century => (\n            <Link\n              key={century}\n              data-cy=\"century\"\n              to={handleSortCenuties(century)}\n              className={cn(\n                'button mr-1',\n                { 'is-info': centuries.includes(century) },\n              )}\n            >\n              {century}\n            </Link>\n          ))}\n\n          <div className=\"level-right ml-4\">\n            <a\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              href=\"#/people\"\n            >\n              All\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","export enum SortField {\n  All = '',\n  Sex = 'sex',\n  Name = 'name',\n  Born = 'born',\n  Died = 'died',\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person, SortField } from '../types';\nimport { Loader } from './Loader';\nimport { filterPeople } from '../utils/filter';\n\ntype Props = {\n  person: Person[]\n  isLoading: boolean\n};\n\nexport const PeopleTable:React.FC<Props> = ({ person, isLoading }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n  const currentSearch = searchParams.get('sort') || '';\n  const currentOrder = searchParams.get('order') || '';\n  const currentSex = searchParams.get('sex') || '';\n  const currentQuery = searchParams.get('query') || '';\n  const currentCenturies = searchParams.getAll('centuries') || [];\n\n  const sortOrderIcon = (field: string) => (\n    cn('fas', {\n      'fa-sort': currentSearch !== `${field}`,\n      'fa-sort-up': currentSearch === `${field}` && currentOrder !== 'desc',\n      'fa-sort-down': currentSearch === `${field}` && currentOrder === 'desc',\n    })\n  );\n\n  const handleSortType = (field: SortField) => {\n    const param = new URLSearchParams(searchParams);\n    let newSearch: SortField | null;\n    let newOrder: string | null;\n\n    if (!currentOrder && currentSearch === field) {\n      newSearch = field;\n      newOrder = 'desc';\n    } else if (currentOrder && currentSearch === field) {\n      newSearch = null;\n      newOrder = null;\n    } else {\n      newSearch = field;\n      newOrder = null;\n    }\n\n    if (newSearch) {\n      param.set('sort', newSearch);\n    } else {\n      param.delete('sort');\n    }\n\n    if (newOrder) {\n      param.set('order', newOrder);\n    } else {\n      param.delete('order');\n    }\n\n    return {\n      pathname: '/people',\n      search: param.toString(),\n    };\n  };\n\n  let currentSortField = '' as SortField;\n\n  if (currentSearch === 'sex') {\n    currentSortField = SortField.Sex;\n  } else if (currentSearch === 'born') {\n    currentSortField = SortField.Born;\n  } else if (currentSearch === 'died') {\n    currentSortField = SortField.Died;\n  } else if (currentSearch === 'name') {\n    currentSortField = SortField.Name;\n  }\n\n  const filteredPersons = filterPeople(person, {\n    sortField: currentSortField,\n    order: currentOrder,\n    sex: currentSex,\n    query: currentQuery,\n    centuries: currentCenturies,\n  });\n\n  const findParent = (persons: Person[], parentName: string | null) => {\n    return persons.find(parent => parent.name === parentName);\n  };\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <Link to={handleSortType(SortField.Name)}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('name')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <Link to={handleSortType(SortField.Sex)}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('sex')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <Link to={handleSortType(SortField.Born)}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('born')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <Link to={handleSortType(SortField.Died)}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('died')} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredPersons.map(personItem => {\n          const father = findParent(person, personItem.fatherName);\n          const mother = findParent(person, personItem.motherName);\n\n          return (\n            <tr\n              key={personItem.slug}\n              data-cy=\"person\"\n              className={cn(\n                { 'has-background-warning': personItem.slug === slug },\n              )}\n            >\n              <td>\n                <Link className={cn({ 'has-text-danger': personItem.sex === 'f' })} to={`/people/${personItem.slug}`}>\n                  {personItem.name}\n                </Link>\n              </td>\n\n              <td>{personItem.sex}</td>\n              <td>{personItem.born}</td>\n              <td>{personItem.died}</td>\n              <td>\n                {mother ? (<Link className=\"has-text-danger\" to={`/people/${mother.slug}`}>{personItem.motherName}</Link>) : (\n                  personItem.motherName || '-'\n                )}\n              </td>\n              <td>\n                {father ? (<Link to={`/people/${father.slug}`}>{personItem.fatherName}</Link>) : (\n                  personItem.fatherName || '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person, SortField } from '../types';\n\nexport type FilterSortParams = {\n  sortField: SortField;\n  order: string;\n  sex: string;\n  query: string;\n  centuries: string[];\n};\n\nexport const filterPeople = (\n  people: Person[],\n  params: FilterSortParams,\n): Person[] => {\n  let filteredPeople = [...people];\n\n  if (params.sex) {\n    return filteredPeople.filter(person => person.sex === params.sex);\n  }\n\n  if (params.query) {\n    const normalizeQuery = params.query.toLowerCase();\n\n    return filteredPeople.filter(\n      person => person.name.toLowerCase().includes(normalizeQuery)\n      || person.fatherName?.toLowerCase().includes(normalizeQuery)\n      || person.motherName?.toLowerCase().includes(normalizeQuery),\n    );\n  }\n\n  if (params.centuries.length > 0) {\n    filteredPeople = filteredPeople.filter(person => {\n      const century = Math.ceil(person.born / 100).toString();\n\n      return params.centuries.includes(century);\n    });\n\n    return filteredPeople;\n  }\n\n  if (params.sortField) {\n    const order = params.order ? -1 : 1;\n\n    filteredPeople = [...filteredPeople].sort((p1, p2) => {\n      switch (params.sortField) {\n        case SortField.Born:\n        case SortField.Died:\n          return (p1[params.sortField] - p2[params.sortField]) * order;\n        case SortField.Name:\n        case SortField.Sex:\n          return p1[params.sortField]\n            .localeCompare(p2[params.sortField]) * order;\n        default:\n          return 0;\n      }\n    });\n  } else {\n    filteredPeople = [...people];\n  }\n\n  return filteredPeople;\n};\n","import { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person[]\n  isLoading: boolean\n};\n\nexport const PeoplePage: React.FC<Props> = ({ person, isLoading }) => {\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {person.length && !isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {!isLoading && !person.length && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n              {!person.length && !isLoading && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n              {!person.length && !isLoading && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n              <PeopleTable\n                person={person}\n                isLoading={isLoading}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import cn from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const loacation = useLocation();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <Link\n            className={cn('navbar-item',\n              { 'has-background-grey-lighter': loacation.pathname === '/' })}\n            to=\"/\"\n          >\n            Home\n          </Link>\n\n          <Link\n            className={cn('navbar-item',\n              {\n                'has-background-grey-lighter':\n                loacation.pathname.includes('/people'),\n              })}\n            to=\"/people\"\n          >\n            People\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\nimport { Person } from './types';\nimport { getPeople } from './api';\n\nexport const App = () => {\n  const [person, setPerson] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getPeople()\n      .then(setPerson)\n      .finally(() => setIsLoading(false));\n  }, [setPerson, setIsLoading]);\n\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n            <Route path=\"people\">\n              <Route\n                index\n                element={<PeoplePage person={person} isLoading={isLoading} />}\n              />\n              <Route\n                path=\"/people/:slug\"\n                element={<PeoplePage person={person} isLoading={isLoading} />}\n              />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}